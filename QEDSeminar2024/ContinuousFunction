import Mathlib

open Function Set Real

variable (f : ℝ → ℝ ) (a : ℝ ) (T : Set ℝ)

/- fibre with exactly two elements -/

#check f ⁻¹' {a} 
#check ncard T 
#check ncard (f ⁻¹' {a})

  
lemma two_set (S : Set ℝ ) (hS : ncard S = 2) : ∃ (x₁ x₂ : ℝ ), x₁ < x₂ ∧ S = {x₁, x₂} := by 
  apply ncard_eq_two.mp at hS
  obtain ⟨ x₁, x₂, h_ne, h_S_eq ⟩ := hS
  by_cases h_lt : x₁ < x₂ 
  · use x₁, x₂ 
  · use x₂, x₁
    · constructor
      rw [not_lt] at h_lt
      exact Ne.lt_of_le h_ne.symm h_lt
      rw [pair_comm x₂ x₁]
      exact h_S_eq

example (hfib : ncard (f ⁻¹' {0}) = 2) : ∃ (x₁ x₂ : ℝ ), x₁ < x₂ ∧ f x₁ = 0 ∧ f x₂ = 0 := by 
  apply two_set at hfib
  obtain ⟨ x₁, x₂, h_ne, h_fib_eq ⟩ := hfib
  use x₁, x₂
  constructor
  · exact h_ne
  · change x₁ ∈ f ⁻¹' {0} ∧ x₂ ∈ f ⁻¹' {0}
    rw [h_fib_eq]
    tauto


/- closed interval is compact -/

def myI : Set ℝ := Icc 0 1

example : IsCompact (Icc 0 1 : Set ℝ) := isCompact_Icc
